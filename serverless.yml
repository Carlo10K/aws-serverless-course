service: crud-users
useDotenv: true
provider:
  name: aws
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action: "dynamodb:*"
          Resource: arn:aws:dynamodb:us-east-1:${env:ID_ACCOUNT}:table/usersTable
        - Effect: Allow
          Action:
            - 's3:GetObject'  #read
            - 's3:PutObject'  #write
          Resource: 
            - 'arn:aws:s3:::serverless-course--${env:ID_ACCOUNT}-us-east-1-bucket-be5e1950/*'
  environment:
    BUCKET: !Join 
      - '-'
      - - serverless-course-
        - !Ref AWS::AccountId
        - !Ref AWS::Region
        - 'bucket'
        - !Select 
          - 0
          - !Split 
            - '-'
            - !Select 
              - 2
              - !Split 
                - /
                - !Ref AWS::StackId

plugins:
  - serverless-dynamodb
  - serverless-offline

package:
  individually: true
  patterns:
    - "!*/**"
    - "!**"

custom:
  serverless-dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      # heapInitial: 200m
      # heapMax: 1g
      migrate: true
    # seed: true
    # convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

functions:
  hello-world:
    handler: handler.hello
    package:
      patterns:
        - "handler.js"
    events:
      - http:
          path: hello
          method: GET
  get-users:
    handler: getUsers/handler.getUsers
    package:
      patterns:
        - "getUsers/handler.js"
    events:
      - http:
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
  create-users:
    handler: createUsers/handler.createUser
    package:
      patterns:
        - "createUsers/handler.js"
    events:
      - http:
          path: user
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  update-user:
    handler: updateUsers/handler.updateUser
    package:
      patterns:
        - "updateUsers/handler.js"
    events:
      - http:
          path: user/{id}
          method: PATCH
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  delete-users:
    handler: deleteUsers/handler.deleteUsers
    runtime: python3.8
    package:
      patterns:
        - "deleteUsers/handler.py"
    events:
      - http:
          path: user/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
  signedURL:
    handler: signedurl/handler.signedS3URL
    package:
      patterns:
        - "signedurl/handler.js"
    events:
      - http:
          path: signedurl
          method: GET
          request:
            parameters:
              querystrings:
                filename: true
  thumbGenerator:
    handler: thumbnail/handler.thumbnailGenerator
    layers:
      - { Ref: BaseLambdaLayer }
    package:
      patterns:
        - "thumbnail/handler.js"
    events:
      - s3:
          bucket: !Join 
          - '-'
          - - serverless-course-
            - !Ref AWS::AccountId
            - !Ref AWS::Region
            - 'bucket'
            - !Select 
              - 0
              - !Split 
                - '-'
                - !Select 
                  - 2
                  - !Split 
                    - /
                    - !Ref AWS::StackId
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: upload/

layers:
  base:
    name: "prod-dependencies"
    compatibleRuntimes:
      - "nodejs14.x"
    package:
      artifact: app/nodejs.zip

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
          
    S3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        #AccessControl: PublicRead
        BucketName: !Join 
          - '-'
          - - serverless-course-
            - !Ref AWS::AccountId
            - !Ref AWS::Region
            - 'bucket'
            - !Select 
              - 0
              - !Split 
                - '-'
                - !Select 
                  - 2
                  - !Split 
                    - /
                    - !Ref AWS::StackId
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        OwnershipControls:
          Rules:
          - ObjectOwnership: ObjectWriter 

    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
              - "s3:GetObject"
              Effect: Allow
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Bucket
                  - /*
              Principal: "*"
